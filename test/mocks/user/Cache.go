// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// GetUser provides a mock function with given fields: telegram
func (_m *Cache) GetUser(telegram string) ([]byte, error) {
	ret := _m.Called(telegram)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(telegram)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(telegram)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(telegram)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVerificationCode provides a mock function with given fields: telegram
func (_m *Cache) GetVerificationCode(telegram string) (int, error) {
	ret := _m.Called(telegram)

	if len(ret) == 0 {
		panic("no return value specified for GetVerificationCode")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(telegram)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(telegram)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(telegram)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUser provides a mock function with given fields: telegram, userJSON
func (_m *Cache) PutUser(telegram string, userJSON []byte) error {
	ret := _m.Called(telegram, userJSON)

	if len(ret) == 0 {
		panic("no return value specified for PutUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(telegram, userJSON)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutVerificationCode provides a mock function with given fields: telegram, code
func (_m *Cache) PutVerificationCode(telegram string, code int) error {
	ret := _m.Called(telegram, code)

	if len(ret) == 0 {
		panic("no return value specified for PutVerificationCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(telegram, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
