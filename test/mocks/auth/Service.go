// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/developeerz/restorio-auth/internal/handler/user/dto"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Refresh provides a mock function with given fields: refreshToken
func (_m *Service) Refresh(refreshToken string) (*dto.JwtAccessResponse, string, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *dto.JwtAccessResponse
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*dto.JwtAccessResponse, string, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.JwtAccessResponse); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.JwtAccessResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(refreshToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
